AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  html-to-pdf-02

  Sample SAM Template for html-to-pdf-02
  
Parameters:
  DomainName: 
    Type: String
    Description: Domain name for API
  ZoneId:
    Type: String
    Description: Route53 ZoneId for custom domain
    Default: none
  CertArn:
    Type: String
    Description: Certificate ARN for custom domain. MUST be provisioned on same zone for a regional API.
    Default: none
  Stage:
    Type: String
    Description: Deployment stage
    AllowedValues:
      - Dev
      - Staging
      - Prod

Conditions:
  CreateZone:
    !Equals [!Ref ZoneId, 'none']
  CreateCert:
    !Equals [!Ref CertArn, 'none']

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs12.x
    Environment:
      Variables:
        SQS_QUEUE: !Ref SQSQueue
        REGION: !Ref AWS::Region
        SCRATCH_BUCKET: !Ref ScratchBucket

Resources:
  GeneratedZone: # If a Zone ID is not passed in the parameteres, then a new zone is created for the domain
    Type: AWS::Route53::HostedZone
    Condition: CreateZone
    Properties: 
      Name: !Ref DomainName

  GeneratedCert: # If a Certificate ARN is not passed in the parameters, then a new cert is created and will required validation during the deploy
    Type: AWS::CertificateManager::Certificate
    Condition: CreateCert
    Properties: 
      DomainName: !Ref DomainName
      ValidationMethod: DNS

  RestApiGateway:
    Type: AWS::Serverless::Api
    Properties: 
      StageName: !Ref Stage
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: !If [CreateCert, !Ref GeneratedCert, !Ref CertArn] 
        Route53:
          HostedZoneId: !If [CreateZone, !Ref GeneratedZone, !Ref ZoneId]

  TriggerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: handlers/trigger/
      Handler: index.lambdaHandler
      Timeout: 10
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SQSQueue.QueueName
      Events:
        Trigger:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /
            Method: post

  WorkFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/work/
      Handler: index.lambdaHandler
      Timeout: 30
      MemorySize: 1024
      Policies:
        - S3WritePolicy:
            BucketName: !Ref ScratchBucket
      Events:
        SQSTriggerEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueue.Arn
            BatchSize: 10

  SQSQueue:
    Type: AWS::SQS::Queue

  ScratchBucket:
    Type: AWS::S3::Bucket

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  TriggerApi:
    Description: "API Gateway endpoint URL for Prod stage for trigger function"
    Value: !Sub "https://${RestApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
  TriggerFunction:
    Description: "Trigger Lambda Function ARN"
    Value: !GetAtt TriggerFunction.Arn
  TriggerFunctionIamRole:
    Description: "Implicit IAM Role created for Trigger function"
    Value: !GetAtt TriggerFunctionRole.Arn
  SQSQueue:
    Description: "SQS Queue URL"
    Value: !GetAtt SQSQueue.Arn
  ScratchBucket:
    Description: "S3 scratch bucket"
    Value: !Ref ScratchBucket